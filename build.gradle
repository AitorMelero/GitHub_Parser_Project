/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */
 
apply plugin: 'java'
apply plugin: 'application'
 
apply plugin: 'me.champeau.gradle.antlr4'
 
mainClassName = 'LanguageParser'

// Define the language parser
//def language = 'python'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    //GSON
    implementation 'com.google.code.gson:gson:2.9.0'
    
    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
	implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.13.0.202109080827-r'
	
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
	//api group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
}

buildscript {
    repositories {
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }

    dependencies {
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
    }
}

antlr4 {
    source = file("src/main/antlr4")
    output = file("build/generated-src/antlr4/parser")
    extraArgs = ['-package', "antlr4.parser"]
}

compileJava.dependsOn antlr4

sourceSets.main.java.srcDirs += antlr4.output

configurations {
    compile.extendsFrom antlr4
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Personal-Parser',
                   'Implementation-Version': '0.0.1'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
